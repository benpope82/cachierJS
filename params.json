{"name":"Cachierjs","tagline":"Javascript preloader for JS, CSS and HTML (Application Cache alternative)","body":"# CachierJS\r\n\r\n[min]: https://raw.github.com/SparebankenVest/cachierJS/master/dist/cachier-1.0.1.min.js\r\n[max]: https://raw.github.com/SparebankenVest/cachierJS/master/dist/cachier-1.0.1.js\r\n\r\nJavascript preloader for Javascript, CSS and HTML (Application Cache alternative)\r\n\r\n## Getting Started\r\n\r\n### In the browser\r\nDownload the [production version][min] or the [development version][max].\r\n\r\nIn your web page (example):\r\n\r\n```html\r\n<script src=\"dist/cachier-1.0.1.min.js\"></script>\r\n<script>\r\nvar preloadConfig = {\r\n    prefix: '__myprefix__',\r\n    debug: true,\r\n    progressStates: 1+2+4+8+16\r\n}\r\n\r\npreload.init(preloadConfig); // initialize with config\r\npreload.loadManifest('/manifest.json'); // load manifest for awesome stuff\r\n</script>\r\n```\r\n\r\n## Documentation\r\nCachierJS is a complete offline cache preloading solution for all your html, css and javascript. It uses MD5 as both version\r\ncontrol and integrity checking. It can integrity (tamper) check files on initialization and/or on loading of files (eval).\r\n\r\nThe preloader relies on a ```manifest``` that describes the resources it should preload in the following format:\r\n```javascript\r\n[\r\n    {\r\n    \"url\": \"/index.html\",\r\n    \"hash\": \"bd01856bfd2065d0d1ee20c03bd3a9af\"\r\n    },\r\n    {\r\n    \"url\": \"/myscript.js\",\r\n    \"hash\": \"273604bfeef7126abe1f9bff1e45126c\"\r\n    }\r\n]\r\n```\r\n\r\nThe preloader has a few options which can be overridden:\r\n```javascript\r\n   var config = {\r\n        prefix: \"__ls__\",\r\n        debug: false,\r\n        hashLength: 32,\r\n        hashCheck: /^[0-9a-f]{32}$/i, // 32 character hex (lower case)\r\n        outputToConsole: console.log.bind(console),\r\n        outputError: console.error.bind(console),\r\n        cachebustFileTypes: undefined, // these files should be cache-busted, undefined means all, can be specified with an array [\".js\",\".css\"]\r\n        tamperCheckFileTypes: undefined, // undefined means all, can be specified with an array [\".js\",\".css\"]\r\n        progressStates: loadStates.ADD + loadStates.NOUPDATE + loadStates.REPLACE + loadStates.REMOVE + loadStates.TAMPEREDREMOVE,\r\n        doTamperCheckOnLoad: false, // perform tamper checking on dynamic script/css/page load\r\n        doTamperCheckOnInit: true, // perform tamper checking when preloader is initialized\r\n        tamperChecker: function (file) { // included YaMD5 hasher can be overwritten by a different hasher\r\n            return window.YaMD5.hashStr(file);\r\n        },\r\n        resourceTimeout: 30000\r\n    };\r\n```\r\n\r\nThe config initializes the preloader by running ```preload.init(config);```.\r\n\r\nTo start preloading, there are two options;\r\n - preload.loadManifest(url);\r\n - preload.checkManifest(json);\r\n\r\nloadManifest(url) fetches the manifest online, and pushes it into checkManifest afterwards. If you do not have an online\r\nmanifest, you can simply push the json directly into preload.checkManifest(json);\r\n\r\n## Examples\r\n_(Coming soon)_\r\n\r\n## Building\r\n\r\n```\r\nnpm install\r\n```\r\n\r\n```\r\ngrunt\r\n```\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n_Also, please don't edit files in the \"dist\" subdirectory as they are generated via Grunt. You'll find source code in the \"lib\" subdirectory!_\r\n\r\n## Release History\r\n2015-05-05 - v1.0.1 - Added measured hash to ```ontamperedresource``` callback, wrote more tests\r\n\r\n2015-04-24 - v1.0.0 - Initial release\r\n\r\n## TODO\r\n* Proper AMD\r\n* Add more testing\r\n* Create wiki page for preloader config options\r\n\r\n## License\r\nCopyright (c) 2015 Sparebanken Vest\r\nLicensed under the MIT license.\r\n","google":"UA-63200294-1","note":"Don't delete this file! It's used internally to help with page regeneration."}